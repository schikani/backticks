# Using let keyword -> `Single-line comment`
let index = 1;

/# -> Multi-line comment start
--------------------------------    
               1
Usage of let with printl
---------------------------------
#/ -> Multi-line comment end

printl(`\n~~~~~~~~~~~~~~~~~~[index]~~~~~~~~~~~~~~~~~`);

let num1 = 30;
let num2 = 31.5;
let num3: int;
let num4: float;

printl(`num1 = [num1]`);
printl(`num2 = [num2]`);

num3 = num1 + 1;
num4 = num2;

printl(`num3 = [num3]`);
printl(`num4 = [num4]`);

let num5 = num1 + num2;

num5 += 1;
printl(`num5 = [num5]`);

index += 1;


/#
--------------------------------
               2
Usage of operators with numbers
--------------------------------
#/
printl(`\n~~~~~~~~~~~~~~~~~~[index]~~~~~~~~~~~~~~~~~`);

if num1 == 20 {printl(`FOUND 20`);}
elif num1 == 30 {printl(`FOUND 30`);}

if num1 >= num2 {printl(`num1 >= num2`);}
elif num2 >= num1 {printl(`num2 >= num1`);}

index += 1;


/#
-----------------------------
             3
Usage of strings with printl
-----------------------------
#/
printl(`\n~~~~~~~~~~~~~~~~~~[index]~~~~~~~~~~~~~~~~~`);

let name = `John`;
printl(`Name: [name]`);

# Concat strings using '+=' operator
name += ` Wick`;
printl(`Fullname: [name]`);

index += 1;


/#
--------------------------------------
                 4
Usage of `==` operator with strings
--------------------------------------
#/
printl(`\n~~~~~~~~~~~~~~~~~~[index]~~~~~~~~~~~~~~~~~`);

let person1 = `Will Smith`;
let person2 = `John Wick`;

if name == person1 {printl(`FOUND [person1]`);}
elif name == person2 {printl(`FOUND [person2]`);}

index += 1;


/#
--------------------------------------
                 5
Usage of private and public functions
`@` is for private functions 
(not available from another file)

`<` is for public functions
(available from another file)
--------------------------------------
#/
printl(`\n~~~~~~~~~~~~~~~~~~[index]~~~~~~~~~~~~~~~~~`);

@ calc(num1: int, num2: int): float
{
    return num1 + num2 / 100.0;
}
printl(`calc(1, 2) = [calc(1, 2)]`);

@ swap_global_vars()
{
    let temp = num1;
    num1 = num3;
    num3 = temp;
}

< some_float(): float
{
    return 658.0;
}

printl(`Before swap: num1 = [num1] | num3 = [num3]`);
swap_global_vars();
printl(`After swap: num1 = [num1] | num3 = [num3]`);
printl(`some_float() = [some_float()]`);

index += 1;


/#
---------------------------------------------------
                        6
Usage of printl and let with complex values in `[]`
---------------------------------------------------
#/
printl(`\n~~~~~~~~~~~~~~~~~~[index]~~~~~~~~~~~~~~~~~`);


printl(`12+10+90/some_float() = [12+10+90/some_float()]`);
let eval_val = 12+10+90/some_float();
printl(`eval_val = [eval_val]`);

index += 1;


/#
---------------------------------------------------
                        7
Usage of loop, loop until and sleep, usleep methods
---------------------------------------------------
#/
printl(`\n~~~~~~~~~~~~~~~~~~[index]~~~~~~~~~~~~~~~~~`);

let count = 3;
loop
{
    if count == 0 {break;}
    printl(`[count]`);
    count -= 1;
    sleep(1);
}

@ loop_until_example()
{
    let count = 0;
    loop until count < 6
    {
        if count == 0 or count == 5
        {
            printl(`---------------------------`);
        }
        elif count == 2 
        {
            printl(`-\tHello\t\t  -`);
        }
        elif count == 3
        {
            printl(`-\t\tWorld!\t  -`);
        }
        else {printl(`-\t\t\t  -`);}

        count += 1;
    }
}

@ loop_until_example2()
{
    if count <= 0
    {
        loop until count < 3
        {
            count += 1;
            printl(`[count]`);
        }
    }
}
loop_until_example();
loop_until_example2();